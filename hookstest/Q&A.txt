Q1. 리액트를 사용하는 이유를 설명해보세요 (2가지 이상)
    - 가상돔을 사용
    - 컴포넌트 사용

Q2. (Q1)을 통해 얻을 수 있는 장점은 무엇일까요?
    - 가상돔은 실제 돔과 다르게 state가 변경한 곳만 체크하여 render를 해주는 구조입니다. 
      즉 실제 돔을 변경하는것보다 효율적인부분은 비용와 속도적인 부분에서 장점이 있습니다.

    - 컴포넌트는 유지보수와 재사용성에 있죠. 컴포넌트로 쪼개어져 있으니 재사용 할수 있는 부분을 따로 빼서 사용가능
      기능 마다 분리 하여 유지보수 부분에서도 추적하기 편하다.
      virtual dom을 통해서 실제 돔과 달리 state변화 한 곳만 랜더링 하다 보니 component 설계를 잘하면 
      랜더링 횟수 최적화 할수있는 장점이 있네요.

Q3. 리액트가 가상 돔을 사용하는 이유는 무엇일까요?
    - 실제 돔과 달리 state변경한 부분만 랜더합니다. 그래서 속도적인 부분도 그렇고 무거운 실제 돔을 움직이는 것보다 cost부분에서도 적습니다.

Q4. 리액트가 가상 돔과 돔 트리를 비교하여 바뀐 부분이 있다면 화면을 다시 그리는 행위를 무엇이라 할까요?
    - 리랜더링입니다~

Q5. (Q3)의 행위를 통해 얻을 수 있는 이점은 무엇일까요?
    - cost부분과 속도적인 측면에서 이점이 있습니다.

Q6. (Q3)은 리액트에서 어느 순간에 실현될까요?
    - 리액트는 state 변경하면 리랜더가 발생하는데 이때마다 가상돔을 생성하는것으로 알고있습니다.

Q7. 훅 함수는 왜 만들게 되었을까요?
    리액트가 class컴포넌트의 불편함을 해결하기 위해 사용하였음.

    아래의 훅 함수는 각 언제 선언되어야 할까요?
    (1) useState - 원하는 부분을 랜더링 하고싶을 때 state변화가 필요하니 그때 선언함
    (2) useRef - 원하는 dom을 선택하고싶을때, 저장변수 선언?할수 있어서
    (3) useEffect - 마운트 했을때, 혹은 언마운트 했을때 랜더링 필요하거나 특정 props나 state를 deps에 넣어 이친구들의 변화가 있을때 랜더링 할때
    (4) useCallback - 함수를 새로 생성하지 않고, 재사용하고싶을때 메모이제이션을 함수를 반환한다.. 불필요한 랜더링을 막을수있습니다.
    (5) useMemo - 불필요한 리랜더링 방지를 위해 메모이제이션에 있는 콜백함수의 값을 반환

Q8. 커스텀 훅을 제작하면서 얻을 수 있는 이점은 무엇이고 어느 때 만들어야 할까요?
    - 필요없는 반복을 줄이고 재사용성에 좋다.
    - 수정사랑이 있을 시 커스텀 훅만 수정하면 끝이여서, 유지보수에 용이하다.

Q9. 리액트로 프로젝트를 만들려고할 때 고려해야하는 사항들을 아는대로 작성해보세요 (3가지 이상)
    - 랜더링 부분 최적화 
    - 컨포넌트 쪼개는 부분? 고려 랜더링부분으로 속도와 비용에 영향을 준다
    - 재사용?을 생각해야한다. 기능을 분리해서 쓰는만큼 재사용가능한 기능을 하나 하나 분리해주면 더 효율적이다.

Q10. 만약 위의 질문에 모두 답을 했다면, 현재 부족한 것은 리액트가 아닌 자바스크립트 일 수 있습니다
    이전 풀어보았던 자바스크립트 API 문제 1~4와 board 문제를 현재 풀이할 수 있는지 확인해보세요
    
    react로 풀이를 한다고 가정했을 때와 (직접 바꿔보지는 말 것, 예제 문제와 유사)
    vanilla js(java script)로 풀이한다고 하였때 와의 차이점은 무엇일까요?

    * 위 문제를 받지 못한 수강생은 메일 전송 시 따로 첨부하여 송부

    - dom event를 직접 건드리지 않는다.
    - 컴포넌트를 쪼개서 컴포넌트만 랜더링 가능한 점이 차이가있다.
    

Q11. 리액트에서 컴포넌트를 나누는 기준은 어떻게 되어야할까요?
     또한, 이러한 관점은 개발자마다 다를 수 있는데 왜 그럴까요? 

     - 기능에 따른 분리, 재사용 가능한 기능을 따로 빼서 재사용 가능하게 할수 있기에 기능을 생각하면서 컴포넌트를 만든다.
     - 랜더링 최적화를 고려해서 컴포넌트를 쪼개야한다.

